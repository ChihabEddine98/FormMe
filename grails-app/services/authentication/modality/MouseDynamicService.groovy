package authentication.modality

import com.ignition_factory.ktbs.bean.Base
import com.ignition_factory.ktbs.bean.Trace
import grails.transaction.Transactional
import ktbs.KtbsService
import defaults.Constants

@Transactional
class MouseDynamicService {

   KtbsService  ktbsService
   
   def extractFeature(Base base, Trace primarytrace) {
	   
	   String modeUrl = ktbsService.getUrlModel(base,primarytrace)
   		// Create transformed trace double click 
	  
	   String methodefsa = "fsa"
	   String [] tracesource = [primarytrace.get_Name()+"/"];
	   String FsaTraceDC = "fsa= {\n\t\"states\": {\n\t\t\"start\": {\n\t\t\t\"transitions\": [{\n\t\t\t\t\"condition\": \"#M_BPress\",\n\t\t\t\t\"target\": \"press1\"\n\t\t\t}]\n\t\t},\n\t\t\"press1\": {\n\t\t\t\"max_duration\": 1000,\n\t\t\t\"transitions\": [{\n\t\t\t\t\t\"condition\": \"#M_BRelease\",\n\t\t\t\t\t\"target\": \"release1\"\n\t\t\t\t}\n\n\t\t\t]\n\t\t},\n\t\t\"release1\": {\n\t\t\t\"max_duration\": 1000,\n\t\t\t\"transitions\": [{\n\t\t\t\t\"condition\": \"#M_BPress\",\n\t\t\t\t\"target\": \"press2\"\n\t\t\t}]\n\t\t},\n\t\t\"press2\": {\n\t\t\t\"max_duration\": 1000,\n\t\t\t\"transitions\": [{\n\t\t\t\t\"condition\": \"#M_BRelease\",\n\t\t\t\t\"target\": \"#M_BDC\"\n\t\t\t}]\n\t\t},\n\n\t\t\"#M_BDC\": {\n\t\t\t\"terminal\": true,\n\t\t\t\"max_duration\": 1000,\n\t\t\t\"ktbs_attributes\": {\n\t\t\t\t\"#xSource\": \"first #x\",\n\t\t\t\t\"#ySource\": \"first #y\",\n\t\t\t\t\"#xDestination\": \"last #x\",\n\t\t\t\t\"#yDestination\": \"last #y\",\n\t\t\t\t\"#TypeButton\": \"#TypeButton\",\n\t\t\t\t\"#duration\": \"span http://liris.cnrs.fr/silex/2009/ktbs#hasEnd\"\n\t\t\t}\n\t\t}\n\n\t}\n}"
	   String[] parametreDC = [FsaTraceDC]
	   ktbsService.createTransformedTrace(base, primarytrace.get_Name()+"_"+Constants.Trace_Dclick,methodefsa , tracesource, parametreDC)
	   // Create transformed trace click
	   
	   String FsaTraceC = "fsa= {\n\t\"allow_overlap\": true,\n\t\"states\": {\n\t\t\"start\": {\n\t\t\t\"transitions\": [{\n\t\t\t\t\"condition\": \"#M_BPress\",\n\t\t\t\t\"target\": \"presseB\"\n\t\t\t}]\n\t\t},\n\t\t\"presseB\": {\n                        \"max_duration\": 2000,\n\t\t\t\"transitions\": [{\n\t\t\t\t\"condition\": \"#M_BRelease\",\n\t\t\t\t\"target\": \"#M_BPR\"\n\t\t\t}],\n\t\t\t\"default_transition\": {\n\t\t\t\t\"target\": \"presseB\",\n\t\t\t\t\"silent\": true\n\t\t\t}\n\t\t},\n\t\n    \"#M_BPR\": {\n            \"terminal\": true,\n                       \"ktbs_attributes\": {\n            \"#xSource\": \"first #x\",\n            \"#ySource\": \"first #y\",\n            \"#xDestination\": \"last #x\",\n            \"#yDestination\": \"last #y\",\n            \"#TypeButton\"  : \"#TypeButton\",\n            \"#duration\": \"span http://liris.cnrs.fr/silex/2009/ktbs#hasEnd\"\n            }\n          }\n\t}\n}"
	   String[] parametreC = [FsaTraceC]
	   ktbsService.createTransformedTrace(base, primarytrace.get_Name()+"_"+Constants.Trace_Click,methodefsa , tracesource, parametreC)
	   // create transformed trace for move action 
	   		// fsa segment move 
	   
	   String FsaTraceSM = "fsa= {\n  \"allow_overlap\": true,\n  \"states\": {\n              \"start\": {\n                        \"max_noise\": 0,\n                        \"transitions\": [\n\n                                       {\n                                       \"condition\": \"#M_Move\",\n                                        \"target\": \"move\"\n                                      }\n                                       ]\n                       },\n            \"move\" : {\n                                   \n                                   \"transitions\": [\n                                     {\n                                     \"condition\": \"?obs a m:M_Move ; m:x ?x ; m:y ?y . ?pred m:x ?x ; m:y ?y .\",\n                                      \"matcher\": \"sparql-ask\",\n                                      \"target\": \"move\"\n                                     },\n                                     {\n                                      \"condition\": \"?obs a m:M_Move ; m:x ?x2 ; m:y ?y2 . ?pred m:x ?x1 ; m:y ?y1 . FILTER(?x2!=?x1 || ?y2!=?y1)\",\n                                      \"matcher\": \"sparql-ask\",\n                                      \"target\": \"#M_MA\"\n                                     }\n                                     \n                                   ]\n              },\n              \"#M_MA\": {\n                      \"terminal\": true,\n                      \"max_total_duration\": 250,\n                      \"ktbs_attributes\": {\n                      \"#xSource\": \"first #x\",\n                      \"#ySource\": \"first #y\",\n                      \"#xDestination\": \"last #x\",\n                      \"#yDestination\": \"last #y\",\n                      \"#xDebug\": \"span #x\",\n                      \"#yDebug\": \"span #y\",\n                      \"#duration\": \"span http://liris.cnrs.fr/silex/2009/ktbs#hasEnd\"\n                      }\n                    }\n  }\n}\n"
	   String[] parametreSM = [FsaTraceSM]
	   ktbsService.createTransformedTrace(base, primarytrace.get_Name()+"_"+Constants.Trace_FsaMoveSegment,methodefsa , tracesource, parametreSM)
	   		
	   		// sparql segment move 
	   String methodesparql = "sparql"
	   String methodeisparql = "isparql"
	   String [] tracesource2 = [primarytrace.get_Name()+"_"+"Trace_FsaMoveSegment/"];
	   String sparlMA = "sparql=  prefix : <http://liris.cnrs.fr/silex/2009/ktbs#> \nprefix model:  <"+modeUrl+"> \n\nCONSTRUCT {\n  [\n     a ?model;\n      \t:hasEnd ?end ;\n        :hasBegin ?begin ;\n         model:xSource ?x0 ;\n         model:ySource ?y0 ;\n         model:xDestination ?xn ;\n         model:yDestination ?yn ;\n         model:duration ?duration ;\n         model:distance ?distance ;\n         model:speed ?speed ;\n        :hasSourceObsel ?o ;\n         \n  \n  ].\n    \n} WHERE {\n\n    {\n     SELECT  ?o ((xsd:decimal(bif:sqrt((?x0-?xn)*(?x0-?xn)+(?y0-?yn)*(?y0-?yn))))as ?distance) \n(if(?duration > 0, ?distance / ?duration, undef) as ?speed) ?model ?end ?begin ?x0  ?y0 ?xn  ?yn ?duration \n  \t WHERE {\n    \t\t?o a ?model;\n      \t\t:hasEnd ?end ;\n        \t:hasBegin ?begin ;\n         \tmodel:xSource ?x0 ;\n         \tmodel:ySource ?y0 ;\n         \tmodel:xDestination ?xn ;\n         \tmodel:yDestination ?yn ;\n         \tmodel:duration ?duration .              \n\t\t}\n    }\n}"
	   
	   // version isparql
	  // String sparlMA = "sparql=  prefix : <http://liris.cnrs.fr/silex/2009/ktbs#> \nprefix model:  <"+modeUrl+"> \n\nSELECT\n     ?sourceObsel\n     ?type\n     (?sourceBegin as ?begin)\n     (?sourceEnd as ?end)\n     (?x0 as ?xSource)\n     (?y0 as ?ySource)\t\n     (?xn as ?xDestination)\n     (?yn as ?yDestination) \n     (?duration as ?duration)     \n     ?distance\n     ?speed   \n            \n WHERE { \n\n    %(__subselect__)s\n        ?sourceObsel a ?type;\n                model:xSource ?x0 ;\n         \tmodel:ySource ?y0 ;\n         \tmodel:xDestination ?xn ;\n         \tmodel:yDestination ?yn ;\n                model:duration ?duration .\n        BIND((xsd:decimal(bif:sqrt((?x0-?xn)*(?x0-?xn)+(?y0-?yn)*(?y0-?yn))))as ?distance)\n        BIND(if(?duration > 0, ?distance / ?duration, undef) as ?speed)\n \n}"
	   
	   String[] parametreMA = [sparlMA]
	   ktbsService.createTransformedTrace(base, primarytrace.get_Name()+"_"+Constants.Trace_SparqlMoveSegment,methodesparql , tracesource2, parametreMA)
	   		
	   		//fsa move action 
	   String [] tracesource3 = [primarytrace.get_Name()+"_"+"Trace_SparqlMoveSegment/"];
	   String FsaTraceMM = "fsa=  {\n  \"allow_overlap\": true,\n  \"states\": {\n              \"start\": {\n                        \"max_noise\": 0,\n                        \"transitions\": [\n\n                                       {\n                                       \"condition\": \"#M_MA\",\n                                        \"target\": \"move\"\n                                      }\n                                       ]\n                       },\n            \"move\" : {\n                                   \"transitions\": [\n                                     {\n                                     \"condition\": \"?obs a m:M_MA ; :hasBegin ?begin. ?pred :hasEnd ?begin  .\",\n                                      \"matcher\": \"sparql-ask\",\n                                      \"target\": \"move\"\n                                     },\n                                     {\n                                      \"condition\": \"?obs a m:M_MA ; :hasBegin ?begin. ?pred :hasEnd ?begin  .\",\n                                      \"matcher\": \"sparql-ask\",\n                                      \"target\": \"#M_MS\"\n                                     }\n                                   ]\n              },\n              \"#M_MS\": {\n                      \"terminal\": true,\n                      \"ktbs_attributes\": {\n                      \"#xSource\": \"first #xSource\",\n                      \"#ySource\": \"first #ySource\",\n                      \"#xDestination\": \"last #xDestination\",\n                      \"#yDestination\": \"last #yDestination\",\n                      \"#timeElapsed\": \"span http://liris.cnrs.fr/silex/2009/ktbs#hasEnd\",\n                      \"#curveLength\": \"sum #distance\",\n                      \"#curveSpeed\": \"avg #speed\",\n                      \"#spanSpeed\": \"span #speed\"\n                      }\n                    }\n  }}"
	   
	   //String FsaTraceMM = "fsa= {\n  \"allow_overlap\": true,\n  \"states\": {\n              \"start\": {\n                        \"max_noise\": 0,\n                        \"transitions\": [\n\n                                       {\n                                       \"condition\": \"#M_Move\",\n                                        \"target\": \"move\"\n                                      }\n                                       ]\n                       },\n            \"move\" : {\n                                   \n                                   \"transitions\": [\n                                     {\n                                     \"condition\": \"?obs a m:M_Move ; m:x ?x ; m:y ?y . ?pred m:x ?x ; m:y ?y .\",\n                                      \"matcher\": \"sparql-ask\",\n                                      \"target\": \"move\"\n                                     },\n                                     {\n                                      \"condition\": \"?obs a m:M_Move ; m:x ?x2 ; m:y ?y2 . ?pred m:x ?x1 ; m:y ?y1 . FILTER(?x2!=?x1 || ?y2!=?y1)\",\n                                      \"matcher\": \"sparql-ask\",\n                                      \"target\": \"#M_MA\"\n                                     }\n                                   ]\n              },\n              \"#M_MA\": {\n                      \"terminal\": true,\n                      \"max_total_duration\": 250,\n                      \"ktbs_attributes\": {\n                      \"#xSource\": \"first #x\",\n                      \"#ySource\": \"first #y\",\n                      \"#xDestination\": \"last #x\",\n                      \"#yDestination\": \"last #y\",\n                      \"#xDebug\": \"span #x\",\n                      \"#yDebug\": \"span #y\",\n                      \"#duration\": \"span http://liris.cnrs.fr/silex/2009/ktbs#hasEnd\"\n                      }\n                    }\n  }\n}\n"
	    String[] parametreMM = [FsaTraceMM]
	   ktbsService.createTransformedTrace(base, primarytrace.get_Name()+"_"+Constants.Trace_FsaMoveAcion,methodefsa , tracesource3, parametreMM)
	   		
	   		//sparql move action
	   
	   String [] tracesource4 = [primarytrace.get_Name()+"_"+"Trace_FsaMoveAcion/"];
	   String sparlMM = "sparql=  prefix : <http://liris.cnrs.fr/silex/2009/ktbs#>\nprefix model:   <"+modeUrl+"> \n\nCONSTRUCT {\n  [\n     a ?model;\n        :hasEnd ?end ;\n        :hasBegin ?begin ;\n         model:xSource ?x0 ;\n         model:ySource ?y0 ;\n         model:xDestination ?xn ;\n         model:yDestination ?yn ;\n         model:timeElapsed ?duration ;\n         model:travelledDistance ?distance ;\n         model:actualSpeed ?speed ;\n         model:lengthRatio ?Ratio ;\n         model:curveAcceleration ?curveAcceleration ;\n         model:curveLength ?curveLength ;\n         model:curveSpeed ?curveSpeed ;\n         model:direction ?direction ;\n         model:acceleration ?a ;\n        :hasSourceObsel ?o ;\n  ].\n\n} WHERE {\n\n    {\n     SELECT  ?o ((xsd:decimal(bif:sqrt((?x0-?xn)*(?x0-?xn)+(?y0-?yn)*(?y0-?yn))))as ?distance) \n(if(?duration > 0, ?distance / ?duration, undef) as ?speed)\n             (if(?distance > 0, ?curveLength / ?distance, undef) as ?Ratio)\n             (if(?duration > 0, ?curveSpeed / ?duration, undef) as ?curveAcceleration)\n             (if(?duration > 0, ?spanSpeed / ?duration, undef) as ?a)\n             ((?xn-?x0) as ?diff)\n             (if(?diff > 0, (?y0-?yn) / ?diff, 1) as ?d)\n             (( xsd:decimal(bif:atan (?d)) * (180/3.14) + 180 )as ?d2)\n             (ceil(?d2/45) as ?direction) # not working, we need a modulo here\n             #(if ( ?d2 <=  45, 1 ,\n             # if ( ?d2 <=  90, 2 ,\n             # if ( ?d2 <=  135, 3,\n             # if ( ?d2 <=  180, 4,\n             # if ( ?d2 <=  225, 5,\n             # if ( ?d2 <=  270, 6,\n             # if ( ?d2 <=  315, 7, 8 )))))))  as ?direction)\n\n             ?model ?end ?begin ?x0  ?y0 ?xn  ?yn ?duration ?curveLength ?curveSpeed\n  \t WHERE {\n    \t\t?o a ?model;\n      \t\t:hasEnd ?end ;\n        \t:hasBegin ?begin ;\n         \tmodel:xSource ?x0 ;\n         \tmodel:ySource ?y0 ;\n         \tmodel:xDestination ?xn ;\n         \tmodel:yDestination ?yn ;\n                model:curveLength ?curveLength ;\n                model:curveSpeed ?curveSpeed ;\n                model:spanSpeed ?spanSpeed ;\n         \tmodel:timeElapsed ?duration .              \n\t\t}\n    }\n}"
	   String inhert = "inherit=true" ;
	   // version isparql	   
	   //String sparlMM = "sparql=\nprefix : <http://liris.cnrs.fr/silex/2009/ktbs#>\nprefix model:   <"+modeUrl+">  \n\nSELECT\n    ?sourceObsel\n    ?type\n    (?sourceBegin as ?begin)\n    (?sourceEnd as ?end)\n    (?x0 as ?xSource)\n    (?y0 as ?ySource)\n    (?xn as ?xDestination)\n    (?yn as ?yDestination)\n    (?duration as ?timeElapsed)\n    (?distance as ?travelledDistance)\n    ?actualSpeed\n    ?lengthRatio\n    ?curveAcceleration\n    ?curveLength\n    ?curveSpeed\n    ?direction\n    ?spanSpeed\n    ?acceleration\nWHERE {\n\n\t%(__subselect__)s\n\n\t?sourceObsel a ?type;\n\t\tmodel:xSource ?x0 ;\n\t\tmodel:ySource ?y0 ;\n\t\tmodel:xDestination ?xn ;\n\t\tmodel:yDestination ?yn ;\n\t\tmodel:curveLength ?curveLength ;\n\t\tmodel:curveSpeed ?curveSpeed ;\n\t\tmodel:spanSpeed ?spanSpeed ;\n\t\tmodel:timeElapsed ?duration .              \n\n\tBIND((xsd:decimal(bif:sqrt((?x0-?xn)*(?x0-?xn)+(?y0-?yn)*(?y0-?yn))))as ?distance) \n\tBIND(if(?duration > 0, ?distance / ?duration, undef) as ?actualSpeed)\n\tBIND(if(?distance > 0, ?curveLength / ?distance, undef) as ?lengthRatio)\n\tBIND(if(?duration > 0, ?curveSpeed / ?duration, undef) as ?curveAcceleration)\n\tBIND(if(?duration > 0, ?spanSpeed / ?duration, undef) as ?acceleration)\n\tBIND((?xn-?x0) as ?diff)\n\tBIND(if(?diff > 0, (?y0-?yn) / ?diff, 1) as ?d)\n\tBIND(( xsd:decimal(bif:atan (?d)) * (180/3.14) + 180 )as ?d2)\n\tBIND(ceil(?d2/45) as ?direction)\n}\n"
	   String[] parametreMM2 = [sparlMM,inhert]
	   ktbsService.createTransformedTrace(base, primarytrace.get_Name()+"_"+Constants.Trace_SparqlMoveAction,methodesparql , tracesource4, parametreMM2)
	   // create transformed trace for Drag and drop
	   		// filtre 
	   String methodefilter = "filter"
	   String filterparam = "otypes="+modeUrl+"M_BPress "+modeUrl+"M_BRelease"
	   String[] parametreDD = [filterparam]
	   ktbsService.createTransformedTrace(base, primarytrace.get_Name()+"_"+Constants.Trace_filtreDD,methodefilter , tracesource, parametreDD)
	   		//fusion 
	   String methodefusion = "fusion"
	   String [] tracesource5 = [primarytrace.get_Name()+"_"+Constants.Trace_filtreDD+ "/", primarytrace.get_Name()+"_"+Constants.Trace_SparqlMoveAction+ "/"]
	   String[] parametres = []
	   ktbsService.createTransformedTrace(base, primarytrace.get_Name()+"_"+Constants.Trace_fussionDD,methodefusion , tracesource5, parametres)
	   		//fsa
	   String [] tracesource6 = [primarytrace.get_Name()+"_"+Constants.Trace_fussionDD+ "/"]
	  
	   String FsaTraceDD = "fsa= {\n        \"states\": {\n              \"start\": {\n                        \"transitions\": [\n                                        \n                                      {\n                                      \"condition\": \"#M_BPress\",\n                                       \"target\": \"press\"\n                                      }\n                                       ]\n                       },\n            \n                    \"press\" : {\n                                \"transitions\": [\n                                  {\n                                  \"condition\": \"#M_MS\",\n                                   \"target\": \"Move\"\n                                 },\n                                  {\n                                  \"condition\": \"#M_MS\",\n                                   \"target\": \"press\"\n                                 }\n                                 \n                                ]\n                    },\n                    \"Move\" : {\n                                \"transitions\": [\n                                 {\n                                 \"condition\": \"#M_BRelease\",\n                                  \"target\": \"#M_DD\"\n                                }\n                                ]\n                    },\n\n                    \"#M_DD\": {\n                            \"terminal\": true,\n                            \"ktbs_attributes\": {\n                              \"#xSource\": \"first #xSource\",\n                              \"#ySource\": \"first #ySource\",\n                              \"#xDestination\": \"last #xDestination\",\n                              \"#yDestination\": \"last #yDestination\",\n                              \"#curveLength\": \"#curveLength\",\n                              \"#curveSpeed\": \"#curveSpeed\",\n                               \"#spanSpeed\" : \"#spanSpeed\",\n                              \"#duration\": \"span http://liris.cnrs.fr/silex/2009/ktbs#hasEnd\"\n                            }\n                          }\n  }\n}"
	   

	   String[] parametreDD2 = [FsaTraceDD]
	   ktbsService.createTransformedTrace(base, primarytrace.get_Name()+"_"+Constants.Trace_MouseFSADD,methodefsa , tracesource6, parametreDD2)
	   		//sparql
	   String [] tracesource7 = [primarytrace.get_Name()+"_"+"Trace_MouseFSADD/"]
	   String sparlDD = "sparql=  prefix : <http://liris.cnrs.fr/silex/2009/ktbs#>\nprefix model:  <"+modeUrl+"> \n\nCONSTRUCT {\n  [\n     a ?model;\n        :hasEnd ?end ;\n        :hasBegin ?begin ;\n         model:xSource ?x0 ;\n         model:ySource ?y0 ;\n         model:xDestination ?xn ;\n         model:yDestination ?yn ;\n         model:timeElapsed ?duration ;\n         model:travelledDistance ?distance ;\n         model:actualSpeed ?speed ;\n         model:curveAcceleration ?curveAcceleration ;\n         model:curveLength ?curveLength ;\n         model:curveSpeed ?curveSpeed ;\n         model:direction ?direction ;\n         model:acceleration ?a ;\n        :hasSourceObsel ?o ;\n  ].\n\n} WHERE {\n\n    {\n     SELECT  ?o ((xsd:decimal(bif:sqrt((?x0-?xn)*(?x0-?xn)+(?y0-?yn)*(?y0-?yn))))as ?distance) ((?distance / ?duration) as ?speed)\n             (if(?distance > 0, ?curveSpeed / ?duration, undef) as ?curveAcceleration)\n             ( (?spanSpeed / ?duration ) as ?a )\n             ((?xn-?x0) as ?diff)\n             (if(?diff > 0, (?y0-?yn) / ?diff, 1) as ?d)\n             (( xsd:decimal(bif:atan (?d)) * (180/3.14) + 180 )as ?d2)\n             (ceil(?d2/45) as ?direction) # not working, we need a modulo here\n             #(if ( ?d2 <=  45, 1 ,\n             # if ( ?d2 <=  90, 2 ,\n             # if ( ?d2 <=  135, 3,\n             # if ( ?d2 <=  180, 4,\n             # if ( ?d2 <=  225, 5,\n             # if ( ?d2 <=  270, 6,\n             # if ( ?d2 <=  315, 7, 8 )))))))  as ?direction)\n\n             ?model ?end ?begin ?x0  ?y0 ?xn  ?yn ?duration ?curveLength ?curveSpeed\n  \t WHERE {\n    \t\t?o a ?model;\n      \t\t:hasEnd ?end ;\n        \t:hasBegin ?begin ;\n         \tmodel:xSource ?x0 ;\n         \tmodel:ySource ?y0 ;\n         \tmodel:xDestination ?xn ;\n         \tmodel:yDestination ?yn ;\n                model:curveLength ?curveLength ;\n                model:curveSpeed ?curveSpeed ;\n                model:spanSpeed ?spanSpeed ;\n         \tmodel:duration ?duration .              \n\t\t}\n    }\n}\n"
	   
	   //version isparql
	   //String sparlDD =  "sparql=\nprefix : <http://liris.cnrs.fr/silex/2009/ktbs#>\nprefix model:   <"+modeUrl+"> \n\nSELECT\n    ?sourceObsel\n    ?type\n    (?sourceBegin as ?begin)\n    (?sourceEnd as ?end)\n    (?x0 as ?xSource)\n    (?y0 as ?ySource)\n    (?xn as ?xDestination)\n    (?yn as ?yDestination)\n    (?distance as ?travelledDistance)\n    ?duration\n    ?actualSpeed\n    ?lengthRatio\n    ?curveAcceleration\n    ?curveLength\n    ?curveSpeed\n    ?direction\n    ?spanSpeed\n    ?acceleration\nWHERE {\n\n\t%(__subselect__)s\n\n\t?sourceObsel a ?type;\n\t\tmodel:xSource ?x0 ;\n\t\tmodel:ySource ?y0 ;\n\t\tmodel:xDestination ?xn ;\n\t\tmodel:yDestination ?yn ;\n\t\tmodel:curveLength ?curveLength ;\n\t\tmodel:curveSpeed ?curveSpeed ;\n\t\tmodel:spanSpeed ?spanSpeed ;\n\t\tmodel:duration ?duration .              \n\n\tBIND((xsd:decimal(bif:sqrt((?x0-?xn)*(?x0-?xn)+(?y0-?yn)*(?y0-?yn))))as ?distance) \n\tBIND(if(?duration > 0, ?distance / ?duration, undef) as ?actualSpeed)\n\tBIND(if(?distance > 0, ?curveLength / ?distance, undef) as ?lengthRatio)\n\tBIND(if(?duration > 0, ?curveSpeed / ?duration, undef) as ?curveAcceleration)\n\tBIND(if(?duration > 0, ?spanSpeed / ?duration, undef) as ?acceleration)\n\tBIND((?xn-?x0) as ?diff)\n\tBIND(if(?diff > 0, (?y0-?yn) / ?diff, 1) as ?d)\n\tBIND(( xsd:decimal(bif:atan (?d)) * (180/3.14) + 180 )as ?d2)\n\tBIND(ceil(?d2/45) as ?direction)\n}\n"
	   String[] parametreDD3 = [sparlDD,inhert]
	   ktbsService.createTransformedTrace(base, primarytrace.get_Name()+"_"+Constants.Trace_MouseDD,methodesparql , tracesource7, parametreDD3)
   }
   Trace createProfil (Base base, Trace primarytrace ,String tracename) {
	   String methode = "fusion"
	   String [] tracesources = [primarytrace.get_Name()+"_"+Constants.Trace_SparqlMoveAction+ "/",
								 primarytrace.get_Name()+"_"+Constants.Trace_Click+"/",
								 primarytrace.get_Name()+"_"+Constants.Trace_Dclick+"/",
								 primarytrace.get_Name()+"_"+Constants.Trace_MouseDD+"/"]
	   String[] parametres = []
	   Trace traceprofil = ktbsService.createTransformedTrace(base, tracename,methode , tracesources, parametres)
	   return traceprofil
   }
   
   Trace createSignature (Base base, Trace primarytrace, String traceprofilname, String tracename, Trace traceprofillimit){
	   String modeUrl = ktbsService.getUrlModel(base,primarytrace)
	   String methodesparql = "sparql"
	   if (traceprofillimit == null){
	   // limit trace profil à 5
	  
	   String sparlP = "sparql=\nPREFIX : <http://liris.cnrs.fr/silex/2009/ktbs#>\nPREFIX model: <"+modeUrl+"> \n\nCONSTRUCT {\n  [ :hasSourceObsel ?o1 ; model:rank ?co2 ]\n}\nWHERE {\n    {\n        SELECT ?o1 (COUNT(?o2) as ?co2)\n        WHERE {\n          ?o1 a ?typ ;\n              :hasEnd ?end1 .\n              \n              ?o2 a ?typ ;\n              :hasEnd ?end2 .\n              \n              FILTER(?end2 <= ?end1)\n          {\n              ?o1 model:direction ?d .\n              ?o2 model:direction ?d .\n          } UNION {\n            FILTER NOT EXISTS { ?o1 model:direction ?d }\n            FILTER NOT EXISTS { ?o2 model:direction ?d }\n          }\n\n          VALUES (?typ) {\n              (model:M_BPR)\n              (model:M_MS)\n              (model:M_DD)\n              (model:M_DC)\n          }\n        } GROUP BY ?o1\n    }\n    FILTER(?co2 <= %(limit)s)\n}\n"
	   String inhert = "inherit=true"
	   String limit = "limit=5 "
	   String[] parametres1 = [sparlP,inhert,limit]
	   String [] tracesource1 = [traceprofilname+"/"]
	   Trace traceprofillimit1 = ktbsService.createTransformedTrace(base, primarytrace.get_Name()+"_"+Constants.TraceProfileMouseLimit,methodesparql , tracesource1, parametres1)
	   traceprofillimit = traceprofillimit1
	   }
	   // create transformed trace  MBPR 
	   
	   String [] tracesource2 = [traceprofillimit.get_Name()+"/"]
	   String sparlMBPR = "sparql=    prefix : <http://liris.cnrs.fr/silex/2009/ktbs#>\nprefix model: <"+modeUrl+"> \n\nCONSTRUCT {\n  [ a ?ctyp ;\n    model:obstyp ?typ ;\n    model:meanTime ?mean;\n    model:deviationTime ?deviation;\n    model:nbOccurence ?count;\n  \n    :hasTrace <%(__destination__)s> ;\n    :hasBegin ?begin ;\n    :hasEnd ?end ;\n  ]\n}\nwhere {\n\n    SELECT  ?typ\n           (SAMPLE(?ctyp2) as ?ctyp)\n           (SAMPLE(?count1) as ?count)\n           (SAMPLE(?mean1) as ?mean)\n            \n           (SUM(ABS(?time2 - ?mean1)/(?count1 - 1)) as ?deviation)\n           (MIN(?begin2) as ?begin)\n           (MAX(?end2) as ?end)\n    {\n\n        # first compute ?mean and ?count for each n-uple (?key1 ?key2 ?typ)\n        {\n            SELECT  ?typ\n                   (SAMPLE(?ctyp1) as ?ctyp2)\n                   (COUNT(?o1) as ?count1)\n                   (AVG(?time1) as ?mean1)\n                   \n            {\n                ?o1 a ?typ ;\n                    \n                    model:duration ?time1 .\n\n                VALUES (?typ ?ctyp1) {\n                    (model:M_BPR model:M_MBPR)\n                }\n            }\n            GROUP BY  ?typ\n            HAVING (COUNT(?o1) >= 5)\n        }\n\n        # then aggregate obsels again, in order to compute deviation (see outer select).\n\n        ?o2 a ?typ ;\n            model:duration ?time2 ;\n            \n            :hasBegin ?begin2 ;\n            :hasEnd ?end2 .\n\n    } GROUP BY  ?typ\n\n}\n\n"
	   String[] parametreMBPR = [sparlMBPR]
	   Trace TraceMBPR = ktbsService.createTransformedTrace(base, traceprofillimit.get_Name()+"_"+Constants.Trace_MBPR,methodesparql , tracesource2, parametreMBPR)
	   
	   // create transformed trace MMS
	   String [] tracesourceMMS = [traceprofillimit.get_Name()+"/"]
	   String sparlMMS = "sparql=    prefix : <http://liris.cnrs.fr/silex/2009/ktbs#>\nprefix model: <"+modeUrl+"> \n\nCONSTRUCT {\n  [ a ?ctyp ;\n    model:obstyp ?typ ;\n    model:direction ?direction;\n    model:meanTime ?meanTime;\n    model:deviationTime ?deviationTime;\n    model:nbOccurence ?count;\n    \n    model:meanSpeed ?meanSpeed;\n    model:deviationSpeed ?deviationSpeed; \n\n    model:meantravelledDistance ?meantravelledDistance;\n    model:deviationtravelledDistance ?deviationtravelledDistance; \n\n    model:meancurveLength ?meancurveLength;\n    model:deviationcurveLength ?deviationcurveLength; \n\n    model:meanacceleration ?meanacceleration;\n    model:deviationacceleration ?deviationacceleration; \n\n    model:meancurveAcceleration ?meancurveAcceleration;\n    model:deviationcurveAcceleration ?deviationcurveAcceleration; \n\n    \n    :hasTrace <%(__destination__)s> ;\n    :hasBegin ?begin ;\n    :hasEnd ?end ;\n  ]\n}\nwhere {\n\n    SELECT ?direction ?typ\n           (SAMPLE(?ctyp2) as ?ctyp)\n           (SAMPLE(?count1) as ?count)\n           (SAMPLE(?meanTime1) as ?meanTime)\n           (SAMPLE(?meanSpeed1) as ?meanSpeed)\n           (SAMPLE(?meantravelledDistance1) as ?meantravelledDistance)\n           (SAMPLE(?meancurveLength1) as ?meancurveLength)\n            \n           (SAMPLE(?meanacceleration1) as ?meanacceleration)\n           (SAMPLE(?meancurveAcceleration1) as ?meancurveAcceleration)\n           \n           (SUM(ABS(?time2 - ?meanTime1)/(?count1 - 1)) as ?deviationTime)\n           (SUM(ABS(?Speed2 - ?meanSpeed1)/(?count1 - 1)) as ?deviationSpeed)\n\n           (SUM(ABS(?travelledDistance2 - ?meantravelledDistance1)/(?count1 - 1)) as ?deviationtravelledDistance)\n           (SUM(ABS(?curveLength2 - ?meancurveLength1)/(?count1 - 1)) as ?deviationcurveLength)\n           \n           (SUM(ABS(?acceleration2 - ?meanacceleration1)/(?count1 - 1)) as ?deviationacceleration)\n           (SUM(ABS(?curveAcceleration2 - ?meancurveAcceleration1)/(?count1 - 1)) as ?deviationcurveAcceleration)\n           \n           (MIN(?begin2) as ?begin)\n           (MAX(?end2) as ?end)\n    {\n\n        # first compute ?mean and ?count for each n-uple (?key1 ?key2 ?typ)\n        {\n            SELECT ?direction ?typ\n                   (SAMPLE(?ctyp1) as ?ctyp2)\n                   (COUNT(?o1) as ?count1)\n                   (AVG(?time1) as ?meanTime1)\n                   (AVG(?Speed1) as ?meanSpeed1)\n                   (AVG(?travelledDistance1) as ?meantravelledDistance1)\n                   (AVG(?curveLength1) as ?meancurveLength1)\n                   (AVG(?acceleration1) as ?meanacceleration1)\n                   (AVG(?curveAcceleration1) as ?meancurveAcceleration1)\n            {\n                ?o1 a ?typ ;\n                    model:direction ?direction ;\n                    model:actualSpeed ?Speed1 ;\n                    model:travelledDistance ?travelledDistance1 ;\n                    model:curveLength ?curveLength1 ;\n                    model:acceleration ?acceleration1 ;\n                    model:curveAcceleration ?curveAcceleration1 ;\n                    model:timeElapsed ?time1 .\n\n                VALUES (?typ ?ctyp1) {\n                    (model:M_MS model:M_MMS)\n                }\n            }\n            GROUP BY ?direction ?typ\n            HAVING (COUNT(?o1) >= 5)\n        }\n\n        # then aggregate obsels again, in order to compute deviation (see outer select).\n\n        ?o2 a ?typ ;\n            model:direction ?direction;\n            model:timeElapsed ?time2 ;\n            model:actualSpeed ?Speed2 ;\n            model:travelledDistance ?travelledDistance2 ;\n            model:curveLength ?curveLength2 ;\n            model:acceleration ?acceleration2 ;\n            model:curveAcceleration ?curveAcceleration2 ;\n            :hasBegin ?begin2 ;\n            :hasEnd ?end2 .\n\n    } GROUP BY ?direction ?typ\n\n}\n\n"
	   String[] parametreMMS = [sparlMMS]
	   Trace TraceMMS = ktbsService.createTransformedTrace(base, traceprofillimit.get_Name()+"_"+Constants.Trace_MMS,methodesparql , tracesourceMMS, parametreMMS)
	   
	   // create transformed trace MDD
	   
	   String [] tracesourceDD = [traceprofillimit.get_Name()+"/"]
	   String sparlDD = "sparql=      prefix : <http://liris.cnrs.fr/silex/2009/ktbs#>\nprefix model: <"+modeUrl+"> \n\nCONSTRUCT {\n  [ a ?ctyp ;\n    model:obstyp ?typ ;\n    model:direction ?direction;\n    model:meanTime ?meanTime;\n    model:deviationTime ?deviationTime;\n    model:nbOccurence ?count;\n    \n    model:meanSpeed ?meanSpeed;\n    model:deviationSpeed ?deviationSpeed; \n\n    model:meantravelledDistance ?meantravelledDistance;\n    model:deviationtravelledDistance ?deviationtravelledDistance; \n\n    model:meancurveLength ?meancurveLength;\n    model:deviationcurveLength ?deviationcurveLength; \n\n    model:meanacceleration ?meanacceleration;\n    model:deviationacceleration ?deviationacceleration; \n\n    model:meancurveAcceleration ?meancurveAcceleration;\n    model:deviationcurveAcceleration ?deviationcurveAcceleration; \n\n    \n    :hasTrace <%(__destination__)s> ;\n    :hasBegin ?begin ;\n    :hasEnd ?end ;\n  ]\n}\nwhere {\n\n    SELECT ?direction ?typ\n           (SAMPLE(?ctyp2) as ?ctyp)\n           (SAMPLE(?count1) as ?count)\n           (SAMPLE(?meanTime1) as ?meanTime)\n           (SAMPLE(?meanSpeed1) as ?meanSpeed)\n           (SAMPLE(?meantravelledDistance1) as ?meantravelledDistance)\n           (SAMPLE(?meancurveLength1) as ?meancurveLength)\n            \n           (SAMPLE(?meanacceleration1) as ?meanacceleration)\n           (SAMPLE(?meancurveAcceleration1) as ?meancurveAcceleration)\n           \n           (SUM(ABS(?time2 - ?meanTime1)/(?count1 - 1)) as ?deviationTime)\n           (SUM(ABS(?Speed2 - ?meanSpeed1)/(?count1 - 1)) as ?deviationSpeed)\n\n           (SUM(ABS(?travelledDistance2 - ?meantravelledDistance1)/(?count1 - 1)) as ?deviationtravelledDistance)\n           (SUM(ABS(?curveLength2 - ?meancurveLength1)/(?count1 - 1)) as ?deviationcurveLength)\n           \n           (SUM(ABS(?acceleration2 - ?meanacceleration1)/(?count1 - 1)) as ?deviationacceleration)\n           (SUM(ABS(?curveAcceleration2 - ?meancurveAcceleration1)/(?count1 - 1)) as ?deviationcurveAcceleration)\n           \n           (MIN(?begin2) as ?begin)\n           (MAX(?end2) as ?end)\n    {\n\n        # first compute ?mean and ?count for each n-uple (?key1 ?key2 ?typ)\n        {\n            SELECT ?direction ?typ\n                   (SAMPLE(?ctyp1) as ?ctyp2)\n                   (COUNT(?o1) as ?count1)\n                   (AVG(?time1) as ?meanTime1)\n                   (AVG(?Speed1) as ?meanSpeed1)\n                   (AVG(?travelledDistance1) as ?meantravelledDistance1)\n                   (AVG(?curveLength1) as ?meancurveLength1)\n                   (AVG(?acceleration1) as ?meanacceleration1)\n                   (AVG(?curveAcceleration1) as ?meancurveAcceleration1)\n            {\n                ?o1 a ?typ ;\n                    model:direction ?direction ;\n                    model:actualSpeed ?Speed1 ;\n                    model:travelledDistance ?travelledDistance1 ;\n                    model:curveLength ?curveLength1 ;\n                    model:acceleration ?acceleration1 ;\n                    model:curveAcceleration ?curveAcceleration1 ;\n                    model:timeElapsed ?time1 .\n\n                VALUES (?typ ?ctyp1) {\n                    (model:M_DD model:M_MDD)\n                }\n            }\n            GROUP BY ?direction ?typ\n            HAVING (COUNT(?o1) >= 5)\n        }\n\n        # then aggregate obsels again, in order to compute deviation (see outer select).\n\n        ?o2 a ?typ ;\n            model:direction ?direction;\n            model:timeElapsed ?time2 ;\n            model:actualSpeed ?Speed2 ;\n            model:travelledDistance ?travelledDistance2 ;\n            model:curveLength ?curveLength2 ;\n            model:acceleration ?acceleration2 ;\n            model:curveAcceleration ?curveAcceleration2 ;\n            :hasBegin ?begin2 ;\n            :hasEnd ?end2 .\n\n    } GROUP BY ?direction ?typ\n\n}\n"
	   String[] parametreDD = [sparlDD]
	   Trace TraceDD = ktbsService.createTransformedTrace(base, traceprofillimit.get_Name()+"_"+Constants.Trace_MDD,methodesparql , tracesourceDD, parametreDD)
	   
	   // trace signature
	   String methode4 = "fusion"
	   String [] tracesources4 = [TraceMBPR.get_Name()+"/",TraceMMS.get_Name()+"/",TraceDD.get_Name()+"/"]
	   String[] parametres4 = []
	   Trace tracesignature = ktbsService.createTransformedTrace(base, traceprofillimit.get_Name()+tracename,methode4 , tracesources4, parametres4)
	   return tracesignature 
   }
}
